import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:calma/configuracion/AppConfig.dart';
import 'package:calma/servicios/session_service.dart';

class NotificationActionsService {

  /// Marcar una notificaci√≥n espec√≠fica como le√≠da
  static Future<bool> marcarNotificacionComoLeida(int notificacionId) async {
    try {
      final response = await http.put(
        Uri.parse('${AppConfig.baseUrl}/api/notificaciones/leida/$notificacionId'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        print('‚úÖ Notificaci√≥n $notificacionId marcada como le√≠da');
        return true;
      } else {
        print('‚ùå Error marcando notificaci√≥n como le√≠da: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Error de conexi√≥n marcando notificaci√≥n: $e');
      return false;
    }
  }

  /// Marcar todas las notificaciones como le√≠das para el usuario actual
  static Future<bool> marcarTodasComoLeidas() async {
    try {
      final session = await SessionService().getSession();
      final rol = session['rol'] as String?;
      final specificId = session['specificId'] as int?;

      if (rol == null || specificId == null || specificId == 0) {
        print('‚ùå No hay sesi√≥n v√°lida para marcar notificaciones');
        return false;
      }

      String endpoint;
      if (rol == 'aspirante') {
        endpoint = '${AppConfig.baseUrl}/api/notificaciones/aspirante/marcar-leidas/$specificId';
      } else if (rol == 'contratante') {
        endpoint = '${AppConfig.baseUrl}/api/notificaciones/contratante/marcar-leidas/$specificId';
      } else {
        print('‚ùå Rol no v√°lido: $rol');
        return false;
      }

      final response = await http.put(
        Uri.parse(endpoint),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        print('‚úÖ Todas las notificaciones marcadas como le√≠das para $rol $specificId');
        return true;
      } else {
        print('‚ùå Error marcando todas las notificaciones: ${response.statusCode}');
        return false;
      }
    } catch (e) {
      print('‚ùå Error de conexi√≥n marcando todas las notificaciones: $e');
      return false;
    }
  }

  /// Obtener el conteo de notificaciones no le√≠das
  static Future<int> obtenerConteoNoLeidas() async {
    try {
      final session = await SessionService().getSession();
      final rol = session['rol'] as String?;
      final specificId = session['specificId'] as int?;

      if (rol == null || specificId == null || specificId == 0) {
        return 0;
      }

      String endpoint;
      if (rol == 'aspirante') {
        endpoint = '${AppConfig.baseUrl}/api/notificaciones/aspirante/noleidas/$specificId';
      } else if (rol == 'contratante') {
        endpoint = '${AppConfig.baseUrl}/api/notificaciones/contratante/noleidas/$specificId';
      } else {
        return 0;
      }

      final response = await http.get(
        Uri.parse(endpoint),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final List<dynamic> notificaciones = jsonDecode(response.body);
        return notificaciones.length;
      } else {
        print('‚ùå Error obteniendo conteo de no le√≠das: ${response.statusCode}');
        return 0;
      }
    } catch (e) {
      print('‚ùå Error de conexi√≥n obteniendo conteo: $e');
      return 0;
    }
  }

  /// Procesar acci√≥n de notificaci√≥n desde la UI de notificaci√≥n push
  static Future<void> procesarAccionNotificacion(String accion, Map<String, dynamic> data) async {
    try {
      print('üîÑ Procesando acci√≥n de notificaci√≥n: $accion');
      print('üìã Datos: $data');

      switch (accion) {
        case 'ver_notificacion':
          await _manejarVerNotificacion(data);
          break;
        case 'marcar_leida':
          await _manejarMarcarLeida(data);
          break;
        case 'ver_todas':
          await _manejarVerTodas(data);
          break;
        default:
          print('‚ö†Ô∏è Acci√≥n no reconocida: $accion');
          break;
      }
    } catch (e) {
      print('‚ùå Error procesando acci√≥n de notificaci√≥n: $e');
    }
  }

  static Future<void> _manejarVerNotificacion(Map<String, dynamic> data) async {
    final notificacionId = data['notificacion_id'];
    if (notificacionId != null) {
      await marcarNotificacionComoLeida(int.parse(notificacionId.toString()));
    }
    // Aqu√≠ puedes navegar a la pantalla espec√≠fica de la notificaci√≥n
    print('üì± Navegando a ver notificaci√≥n espec√≠fica');
  }

  static Future<void> _manejarMarcarLeida(Map<String, dynamic> data) async {
    final notificacionId = data['notificacion_id'];
    if (notificacionId != null) {
      await marcarNotificacionComoLeida(int.parse(notificacionId.toString()));
      print('‚úÖ Notificaci√≥n marcada como le√≠da desde acci√≥n push');
    }
  }

  static Future<void> _manejarVerTodas(Map<String, dynamic> data) async {
    // Navegar a la pantalla de todas las notificaciones
    print('üì± Navegando a ver todas las notificaciones');
    // Aqu√≠ implementas la navegaci√≥n espec√≠fica
  }
}